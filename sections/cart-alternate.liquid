<section data-section-id="{{ section.id }}" data-section-type="cart" data-section-settings='{{ section_settings }}'>
  {%- if cart.item_count == 0 -%}
  <div class="EmptyState">
    <div class="Container">
      <h1 class="EmptyState__Title Heading u-h5">{{ 'cart.general.empty' | t }}</h1>

      {%- if settings.cart_show_free_shipping_threshold -%}
      {%- assign threshold_in_cents = settings.cart_free_shipping_threshold | times: 100 -%}
      {%- capture remaining_amount -%}<span><span style="display:none" class="tdf-cart-total-flag"></span><span
          class="wh-original-cart-total"><span class='wh-original-price'>
            <span class="saso-cart-original-total"><span class="Bold-theme-hook-DO-NOT-DELETE bold_cart_total"
                style="display:none !important;"></span>{{ cart.total_price | minus: threshold_in_cents | abs |
              money_without_trailing_zeros }}</span>
            <span class="saso-cart-total"></span>
          </span></span><span class="wh-cart-total"></span>
        <div class="additional-notes"><span class="wh-minimums-note"></span><span class="wh-extra-note"></span></div>
      </span>{%- endcapture -%}

      <p class="Text--subdued">{{- 'cart.general.free_shipping_remaining_html' | t: remaining_amount: remaining_amount
        -}}</p>
      {%- endif -%}

      <a href="/collections/all" class="EmptyState__Action Button Button--primary">{{ 'cart.general.empty_button' | t
        }}</a>
    </div>
  </div>
  {%- else -%}
  <div class="Container">
    <header class="PageHeader">
      <div class="SectionHeader SectionHeader--center">
        <h1 class="SectionHeader__Heading Heading u-h1">{{ 'cart.general.title' | t }}</h1>

        {%- if settings.cart_show_free_shipping_threshold -%}
        {%- assign threshold_in_cents = settings.cart_free_shipping_threshold | times: 100 -%}

        <p class="SectionHeader__Description Text--subdued">
          {%- if cart.total_price >= threshold_in_cents -%}
          {{- 'cart.general.free_shipping' | t -}}
          {%- else -%}
          {%- capture remaining_amount -%}<span><span style="display:none" class="tdf-cart-total-flag"></span><span
              class="wh-original-cart-total"><span class='wh-original-price'>
                <span class="saso-cart-original-total"><span class="Bold-theme-hook-DO-NOT-DELETE bold_cart_total_2"
                    style="display:none !important;"></span>{{ cart.total_price | minus: threshold_in_cents | abs |
                  money_without_trailing_zeros }}</span>
                <span class="saso-cart-total"></span>
              </span></span><span class="wh-cart-total"></span>
            <div class="additional-notes"><span class="wh-minimums-note"></span><span class="wh-extra-note"></span>
            </div>
          </span>{%- endcapture -%}
          {{- 'cart.general.free_shipping_remaining_html' | t: remaining_amount: remaining_amount -}}
          {%- endif -%}
        </p>
        {%- endif -%}
      </div>
    </header>

    <div id="cartForm" class="PageContent">
      <!-- Combo de error --->
      <!-- <div class="cart-error--message"></div> -->
      <!-- This example requires Tailwind CSS v2.0+ -->
      
        <div v-if="novalidCart" class="rounded-md bg-red-50 p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <!-- Heroicon name: solid/x-circle -->
            <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">
              Hay en errores en tu carrito 
            </h3>
            <div class="mt-2 text-sm text-red-700">
              <ul role="list" class="list-disc pl-5 space-y-1">
                <li v-for="item in error" >
                  ${ item }
                </li>
              </ul>
            </div>
          </div>
        </div>
        </div>
      

      <!-- Selector de plan-->
      <div class="flex justify-center">
        <div class="mb-3 xl:w-96">
          <select v-model="plan" @change="onPlanChange($event)" class="form-select appearance-none
              block
              w-full
              px-3
              py-1.5
              text-base
              font-normal
              text-gray-700
              bg-white bg-clip-padding bg-no-repeat
              border border-solid border-gray-300
              rounded
              transition
              ease-in-out
              m-0
              focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
            aria-label="Default select example">
            <option selected value="Selecciona">Selecciona</option>
            <option value="6 meses">6 meses</option>
            <option value="12 meses">12 meses</option>
            <option value="24 meses">24 meses</option>
            <option value="36 meses">36 meses</option>
            <option value="Compra">Compra</option>
          </select>
        </div>
      </div>
      <form action="/cart" method="POST" class="Cart Cart--expanded">
        <input type="hidden" name="attributes[collection_mobile_items_per_row]" value="">
        <input type="hidden" name="attributes[collection_desktop_items_per_row]" value="">

        {% include 'cart-items-copy' %}

        <footer class="Cart__Footer">
          {%- if settings.cart_enable_notes -%}
          <div class="Cart__NoteContainer">
            <span class="Cart__NoteButton">{{ 'cart.general.add_note' | t }}</span>
            <textarea class="Cart__Note Form__Textarea" name="note" id="cart-note" rows="4"
              placeholder="{{ 'cart.general.note_placeholder' | t }}">{{ cart.note }}</textarea>
          </div>
          {%- endif -%}

          <div class="Cart__Recap">
            {%- capture shipping_and_taxes_notice -%}{{ 'cart.general.shipping_and_taxes_notice' | t }}{%- endcapture
            -%}

            <span class="Cart__Total Heading u-h6">{{ 'cart.general.total' | t }}: <span data-money-convertible><span
                  style="display:none" class="tdf-cart-total-flag"></span><span class="wh-original-cart-total"><span
                    class='wh-original-price'>
                    <span class="saso-cart-original-total"><span class="bcpo-cart-original-total"><span
                          class="Bold-theme-hook-DO-NOT-DELETE bold_cart_total_3"
                          style="display:none !important;"></span>${ cart.total_price }</span></span>
                    <span class="saso-cart-total"></span>
                  </span></span><span class="wh-cart-total"></span>
                <div class="additional-notes"><span class="wh-minimums-note"></span><span class="wh-extra-note"></span>
                </div>
              </span></span>

            {%- if shipping_and_taxes_notice != blank -%}
            <span class="Cart__Taxes Text--subdued">{{ shipping_and_taxes_notice }}</span>
            {%- endif -%}
            <!---<div class="Form__Item">
                <div class="Form__CheckboxWrapper">
                  <input id="terms" type="checkbox" name="terms" class="Form__Checkbox"  required>
                  {% include 'icon' with 'checkmark' %}
                  <label for="terms"><span class="Rte">{{ 'footer.newsletter.conditions_html' | t }}</span></label>
                </div>
              </div>--->
            <div class="GroupFooterx group-cart-footer--custom">
              <a class="Button Button--secondary Button--full" href="{{ section.settings.continue_buying_link }}">{{
                'cart.general.continue_buying' | t }}</a>
              <br>
              <br>
              <span class="titulo-forma-pago">¿Cómo quieres pagar?</span>
              <br>
              <div class="button-forma-pago button-cart-contado is-not-selected">
                <span class="cart-left">Al contado</span>
                <span class="cart-right-icon-svg">
                  <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 240.811 240.811"
                    style="enable-background:new 0 0 240.811 240.811;" xml:space="preserve">
                    <g>
                      <path id="Expand_More"
                        d="M220.088,57.667l-99.671,99.695L20.746,57.655c-4.752-4.752-12.439-4.752-17.191,0c-4.74,4.752-4.74,12.451,0,17.203l108.261,108.297l0,0l0,0c4.74,4.752,12.439,4.752,17.179,0L237.256,74.859c4.74-4.752,4.74-12.463,0-17.215C232.528,52.915,224.828,52.915,220.088,57.667z">
                      </path>
                    </g>
                  </svg>
                </span>
                <span class="cart-right">{{ cart.total_price | money_without_trailing_zeros }}</span>
                <span class="cart-whole">
                  <span class="text-center">Un solo pago por tarjeta de crédito</span>
                </span>
              </div>
              <br>
              {% if shop.locale == "es" %}
              <div class="button-forma-pago button-cart-credito is-not-selected">
                <span class="cart-left">Pagos mensuales</span>
                <span class="cart-right-icon-svg">
                  <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 240.811 240.811"
                    style="enable-background:new 0 0 240.811 240.811;" xml:space="preserve">
                    <g>
                      <path id="Expand_More"
                        d="M220.088,57.667l-99.671,99.695L20.746,57.655c-4.752-4.752-12.439-4.752-17.191,0c-4.74,4.752-4.74,12.451,0,17.203l108.261,108.297l0,0l0,0c4.74,4.752,12.439,4.752,17.179,0L237.256,74.859c4.74-4.752,4.74-12.463,0-17.215C232.528,52.915,224.828,52.915,220.088,57.667z">
                      </path>
                    </g>
                  </svg>
                </span>
                <span class="cart-right"></span>
                <span class="cart-whole">
                  <ul class="cuotas-arquitectura" data-format="{{ 0 | money_without_trailing_zeros }}"
                    data-totalprice="{{ cart.total_price }}" data-cuotas="3,6,10,15,24" data-tae="0,0,0.04,7.01,10.65"
                    data-mult="0,0,0.04,0.04,0.10" data-valid="0,0,0,800,800"></ul>
                  <br>
                  <span>Máximo de 2000 Euros. Financiación al instante. Sin papeleos. Solo con una tarjeta de
                    crédito.</span>
                </span>
              </div>
              {% endif %}


              <br>
              <div class="Form__Item">
                <div class="Form__CheckboxWrapper">
                  <input id="terms" type="checkbox" name="terms" class="Form__Checkbox" required>
                  {% include 'icon' with 'checkmark' %}
                  <label for="terms"><span class="Rte">{{ 'footer.newsletter.conditions_html' | t }}</span></label>
                </div>
              </div>
              <br>
              <!---<button @click.prevent="location.href = '/pages/custom-checkout';" type="button" class="proceed-to-pay">Proceder al pago</button> -->
             <div v-if="isCompraPlan()">
              
                <input :disabled="novalidCart" type="submit" id='input_button' name="checkout" style="width:100%"
                class="Cart__Checkout Button Button--primary Button--full dont-allow" value="Al contado"
                data-value="{{ 'cart.general.checkout' | t }}">

             </div> 
             <div v-else> 

              <input  :disabled="novalidCart" @click="goCustomCheckout" type="submit" id='input_button' name="checkout" style="width:100%"
              class="Cart__Checkout Button Button--primary Button--full dont-allow" value="Pagos mensuales"
              data-value="{{ 'cart.general.checkout' | t }}">
             
            </div>  
             <!-- <span class="hide opacity-on-mobile" style="line-height:47px;margin:0 20px;">o</span>
              <a class="hide Button Button--secondary Button--full custom-link-to-checkout"
                href="/pages/custom-checkout">Pagos mensuales</a> -->
            </div>
          </div>
          <script>
            $('.Form__CheckboxWrapper input').change(function () {
              if ($('.Form__CheckboxWrapper input.Form__Checkbox:checked').length == $('.checkout-item input.check-terms').length) {
                $('.Cart__Checkout').removeClass('dont-allow')
              } else {
                $('.Cart__Checkout').addClass('dont-allow')
              }
            });
            $('.custom-link-to-checkout').click(function (e) {
              e.preventDefault();
              if (!$("#terms").is(":checked")) {
                $("#input_button").trigger("click");
                return false;
              }
              top.location.href = $(this).attr("href");
            });
            $(document).on('click', '.button-forma-pago', function (e) {
              $('.cart-pay-error').remove();
              if (!$(this).hasClass('button-forma-pago-selected')) {
                $('.button-forma-pago-selected').addClass('is-not-selected');
                $('.button-forma-pago-selected').removeClass('button-forma-pago-selected');
                $(this).removeClass('is-not-selected');
                $(this).addClass('button-forma-pago-selected');
                //$('input[name="cart_credit"]:last').prop("checked", true);
                if ($(this).hasClass('button-cart-credito')) {
                  //$('input[name="cart_credit"]:last').trigger("click");
                  $('input[name="cart_credit"]:last').prop("checked", true);
                  $('input[name="cart_credit"]:last').change();
                }
              }
            });
            $(document).on('change', 'input[name="cart_credit"]', function (e) {
              const money_format = $('.cuotas-arquitectura').attr('data-format');
              const cuotaSelected = `
					${money_format.replace("0", $(this).attr('data-cuotaval'))} <small>al mes durante ${$(this).val()} meses </small>
				`;
              $('.button-forma-pago.button-cart-credito .cart-right').html(cuotaSelected);
            });
            $(document).on('click', '.proceed-to-pay', function (e) {
              e.preventDefault();
              $('.cart-pay-error').remove();
              if (!$('.button-forma-pago-selected').length) {
                $('.proceed-to-pay').before('<span class="cart-pay-error">*Seleccione un método de pago</span>');
                return;
              }
              if ($('.cuotas-arquitectura.is-cuotas-loaded').length && $('.button-forma-pago.button-forma-pago-selected').hasClass('button-cart-credito')) {
                const total_price = parseFloat($('.cuotas-arquitectura.is-cuotas-loaded').attr('data-totalprice')) / 100;
                if (total_price > 2000) {
                  $('.proceed-to-pay').before('<span class="cart-pay-error">*Máximo 2000 Euros, por favor selecciona Al contado</span>');
                  return;
                }
              }
              if ($('.button-forma-pago.button-forma-pago-selected').hasClass('button-cart-credito')) {
                if (!$("#terms").is(":checked")) {
                  $("#input_button").trigger("click");
                  return false;
                }
                // identificando el cupon de la ruleta
                var proof_factor_widget = localStorage.getItem("proof_factor_widget");
                if (proof_factor_widget === null) {
                  // no tiene cupon de ruleta
                  top.location.href = "/pages/custom-checkout";
                } else {
                  // Capturando el cupon de la ruleta, para envio a pepper
                  var discount_ruleta = JSON.parse(proof_factor_widget);
                  discount_ruleta = discount_ruleta.wheel[Object.keys(discount_ruleta.wheel)[0]];
                  if (discount_ruleta.response !== undefined) {
                    discount_ruleta = discount_ruleta.response.value;
                    discount_ruleta = encodeURIComponent(discount_ruleta);
                    console.log(discount_ruleta);
                    top.location.href = "/pages/custom-checkout?discount=" + discount_ruleta;
                  } else {
                    top.location.href = "/pages/custom-checkout";
                  }
                }
              } else {
                $('#input_button').trigger("click");
              }
            });
            if (!$('.cuotas-arquitectura').hasClass('is-cuotas-loaded')) {
              const money_format = $('.cuotas-arquitectura').attr('data-format');
              const total_price = parseFloat($('.cuotas-arquitectura').attr('data-totalprice')) / 100;
              const data_cuotas = $('.cuotas-arquitectura').attr('data-cuotas').split(",");
              const data_tae = $('.cuotas-arquitectura').attr('data-tae').split(",");
              const data_mult = $('.cuotas-arquitectura').attr('data-mult').split(",");
              const data_valid = $('.cuotas-arquitectura').attr('data-valid').split(",");
              let countQuotes = 0;
              data_cuotas.map(function (v, i) {
                if (total_price > parseFloat(data_valid[i])) {
                  const valor_cuota = ((total_price + (total_price * parseFloat(data_mult[i]))) / v).toFixed(2);
                  if (valor_cuota >= 20) {
                    countQuotes++;
                    $('.cuotas-arquitectura').append(`
                          <li>
                              <label for="id_${i}">
                                  <input id="id_${i}" type="radio" name="cart_credit" value="${v}" data-cuotaval="${valor_cuota}" data-tae="${data_tae[i]}"/> 
                                  <span>${v} meses </span>
                                  <span>${money_format.replace("0", valor_cuota)}</span>
                              </label>
                          </li>
                      `);
                  }
                }
              });
              $('.cuotas-arquitectura').addClass('is-cuotas-loaded');
              if (countQuotes === 0) {
                $('.button-forma-pago.button-cart-credito').addClass('hide');
                $('.button-forma-pago.button-cart-contado').removeClass('is-not-selected').addClass('button-forma-pago-selected');
              }
            }
            if (window.top.location.href.includes('error=nocredit')) {
              $('.cart-error--message').addClass('cart-error--visible');
              $('.cart-error--message').html('El pago se ha interrumpido debido a que Pepper a denegado su préstamo o porque ha surgido otro problema durante el proceso. Inténtelo de nuevo con otro método de pago o contacte con nosotros.');
              window.history.replaceState({}, document.title, '/cart');
            }
            $(document).on('click', '[data-qty-limit]', function (e) {
              e.preventDefault();
              if (e.target.getAttribute('data-qty-limit')) {
                var quantity = parseInt(e.target.getAttribute('data-quantity'));
                var qtyLimit = parseInt(e.target.getAttribute('data-qty-limit'));
                if (quantity > qtyLimit) {
                  var currId = (new Date()).getTime();
                  console.log("span-msg", $(e.target).parent().parent().parent().find('.span-msg').length);
                  if (!$(e.target).parent().parent().parent().find('.span-msg').length) {
                    $(e.target).parent().parent().after(
                      `<div id="span_${currId}" class="span-msg"><div class="div-small"><span>Haz alcanzado el límite disponible para este producto</span></div></div>`
                    );
                    setTimeout(function () {
                      $(`#span_${currId}`).remove();
                    }, 5500);
                  }
                  return false;
                }
              }
              if ($(e.target).next().hasClass('QuantitySelector__Button'))
                $(e.target).next().trigger('click');
              else
                window.top.location.href = e.target.getAttribute('data-href');
            });
          </script>
        </footer>
      </form>



      {%- if section.settings.show_shipping_estimator -%}
      <div class="Section Section--spacingExtraLarge">
        <div class="Panel">
          <h2 class="Panel__Title Heading u-h2">{{ 'cart.shipping_estimator.title' | t }}</h2>

          <div class="Panel__Content">
            <div class="ShippingEstimator">
              <div class="ShippingEstimator__Form">
                <div class="ShippingEstimator__Country Form__Select Select Select--primary">
                  {%- include 'icon' with 'select-arrow' -%}
                  <select name="country" title="{{ 'cart.shipping_estimator.country' | t }}"
                    data-default="{% if customer %}{{ customer.default_address.country }}{% elsif section.settings.shipping_estimator_default_country != '' %}{{ section.settings.shipping_estimator_default_country }}{% endif %}">{{
                    all_country_option_tags }}</select>
                </div>

                <div class="ShippingEstimator__Province Form__Select Select Select--primary" style="display: none">
                  {%- include 'icon' with 'select-arrow' -%}
                  <select name="province" title="{{ 'cart.shipping_estimator.province' | t }}"></select>
                </div>

                <input type="text" class="ShippingEstimator__Zip Form__Input" name="zip"
                  placeholder="{{ 'cart.shipping_estimator.zip_code' | t }}">

                <button type="button" class="ShippingEstimator__Submit Button Button--primary">{{
                  'cart.shipping_estimator.estimate' | t }}</button>
              </div>

              <div class="ShippingEstimator__Error Alert Alert--error" style="display: none"></div>
              <div class="ShippingEstimator__Results">
                <div class="ShippingEstimator__ResultsInner"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {%- endif -%}
    </div>
  </div>
  {%- endif -%}
</section>


<script>
  // Vue managenment of the cart
  const formOption = {
    name: "cart-Form",
    delimiters: ['${', '}'],
    data() {
      return {
        plan: 'Compra',
        test: 'test',
        cart: null,
        error: [],
      }
    },
    created() {

      fetch('/cart.js')
        .then(res => res.json())
        .then(result => {
          //console.log(result)
          this.cart = result;
          console.log(result)   
        })
        .catch(error => console.log(error));

    },
    computed: {
      novalidCart: function(){
        this.error = [];
        let equalplan = this.isEqualPlan();
        let pricerange = this.isPriceRange();
        console.log("equalplan",equalplan);
        console.log("precioenrango",pricerange);
        if(!equalplan ){
          this.error.push("Planes diferentes en el carrito")
        }
        if(!pricerange){
          this.error.push("El pago por coutas tiene que estar entre €10 y €2000")
        }

        if(!equalplan || !pricerange){
          return true
        }else{
          return false;
        }
        
      }
    },
    methods: {
      goCustomCheckout(event){
         // now we have access to the native event
          event.preventDefault() ;
          window.location.href='/pages/custom-checkout';
    },
      isCompraPlan(){
       //let equal =  this.isEqualplan();
       let ele = this.cart.items.filter(item => item.variant_options[0] === "Compra")
        console.log("compra", ele)
        
       return ele.length === this.cart.items.length;
       
      },
      isEqualPlan(){
          let equal = true;
          if(this.cart.items.length === 0){
            return true;
          }
          let plan = this.cart.items[0].variant_options[0]
          let i = 1;
          while(i < this.cart.items.length && equal){
            if(this.cart.items[i].variant_options[0] !== plan){
              equal = false
            }
            i++;
          }
          return equal;
      },
      
      isPriceRange(){
         let iscompraplan = this.isCompraPlan()
         let equalplan = this.isEqualPlan()
         if(iscompraplan){
           return true
         }
         if(this.cart.total_price >= 1000 && this.cart.total_price < 200000  ){
            return true;
         }
         return false;
      },
      onPlanChange(event) {
        console.log('new_plan', event.target.value)
        if(event.target.value === "Selecciona"){
          return;
        }
        this.cartChangePlans(event.target.value)
      },

      cartChangePlans(plan){
        const carItems = [];
        // Obtiene todas las variantes y cantidades de acuerdo al plan
        this.cart.items.forEach((item, index) => {
          console.log(item)
          const variantPlanQuantity = item.quantity;
          const variantsPlan = item.properties._rest;
          // se obtiene la variante segun el plan para ese elemento
          const variantPlan = variantsPlan.filter(variant => {
            if (variant.option1 === plan) {
              return variant
            }
          })[0];

          if (!variantPlan) {
            return;
          }
          // Voy a buscar si la variante ya existe en carItems
           
          let indexvariant = carItems.findIndex((variant) => variant.id === variantPlan.id)
          //total_price += (variantPlanQuantity * variantPlan.price)

          if (indexvariant !== -1) { // if la variante exite

            carItems[indexvariant].quantity += variantPlanQuantity
          } else { // si la variante no exite
            
            
            carItems.push({
              id: variantPlan.id,
              quantity: variantPlanQuantity,
              properties: {
                '_rest': variantsPlan
              }
            });

            console.log("cartbefore",carItems)
          }

        })

        // clear card
        // add card
        // get card and assing to cart in data
        //   call to api to add a element to a car
        fetch('/cart/clear.js', {
                    method: 'POST', // or 'PUT'
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  }).then(res => res.json())
                    .catch(error => console.error('Error:', error))
                    .then(response => {

                     
                      // Add new Car Items
                      //   call to api to add a element to a car
                      fetch('/cart/add.js', {
                        method: 'POST', // or 'PUT'
                        body: JSON.stringify({items:carItems}), // data can be `string` or {object}!
                        headers: {
                          'Content-Type': 'application/json'
                        }
                      }).then(res => res.json())
                        .catch(error => console.error('Error:', error))
                        .then(response => {
                          // Bring the new Car
                          fetch('/cart.js').then(res => res.json())
                          .catch(error => console.error('Error:', error))
                          .then(response=>{
                            this.cart = response;
                          })  
                        });
                    
                      });
                    
      },
      cartVirtualPlans(plan) {

        const carItems = [];
        let total_price = 0;
        let vcart = null;

        // Obtiene todas las variantes y cantidades de acuerdo al plan
        this.cart.items.forEach((item, index) => {
          console.log(item)
          const variantPlanQuantity = item.quantity;
          const variantsPlan = item.properties._rest;
          // se obtiene la variante segun el plan para ese elemento
          const variantPlan = variantsPlan.filter(variant => {
            if (variant.option1 === plan) {
              return variant
            }
          })[0];

          if (!variantPlan) {
            return;
          }
          // Voy a buscar si la variante ya existe en carItems
          let indexvariant = carItems.findIndex((variant) => variant.id === variantsPlan.id)
          total_price += (variantPlanQuantity * variantPlan.price)

          if (indexvariant !== -1) { // if la variante exite

            carItems[indexvariant].quantity += variantPlanQuantity
          } else { // si la variante no exite

            // hacer una copia mas exashutiva
            carItems.push({
              id: variantPlan.id,
              quantity: variantPlanQuantity,
              properties: {
                '_rest': variantsPlan
              }
            });
          }

        })

        vcart = {
          "token": "",
          "note": null,
          "attributes": {},
          "total_price": total_price,
          "total_weight": 0,
          "item_count": carItems.length,
          "items": carItems,
          "requires_shipping": false,
          "currency": "CAD"
        }

        
        console.log('carrito virtual', vcart);
        // antes de assignar el vcart mejorarlo

      },
      addToCart(event) {
        // Corta la accion normal del formualrio
        event.preventDefault()

        let selectedVariant;

        // Buscando la variante segun las optiones seleccionadas por el usuario
        this.variant.forEach((variant, i) => {
          if (variant.option1 === this.form.selections[0] && variant.option2 === this.form.selections[1] &&
            variant.option3 === this.form.selections[2]
          ) {
            selectedVariant = variant
          }
        })

        // Preparing Data
        let data = {
          id: selectedVariant.id,
          quantity: 1
        }

        //   call to api to add a element to a car
        fetch('/cart/add.js', {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(res => res.json())
          .catch(error => console.error('Error:', error))
          .then(response => console.log('Success:', response));

      }
    }


  }

  const productForm = Vue.createApp(formOption).mount('#cartForm')


</script>

<style>
  .span-msg {
    color: red;
    position: relative;
  }

  .span-msg .div-small {
    position: absolute;
    font-size: 9px;
    background-color: rgba(255, 255, 255, 0.5);
    display: inline-block;
    max-width: 165px;
    padding: 5px;
    z-index: 99;
    right: -95px;
    bottom: 100%;
    text-align: left;
  }

  @media screen and (max-width: 595px) {
    .span-msg .div-small {
      font-size: 8px;
      background-color: rgba(255, 255, 255, 0.7);
      right: -45px;
      bottom: -40px;
    }
  }
</style>
{% schema %}
{
"name": "Cart page",
"class": "shopify-section--bordered",
"settings": [
{
"type": "url",
"id": "continue_buying_link",
"label": "Continue Buying Link"
},
{
"type": "checkbox",
"id": "show_shipping_estimator",
"label": "Show shipping rates calculator",
"default": false
},
{
"type": "text",
"id": "shipping_estimator_default_country",
"label": "Default country to use",
"info": "If your customer is logged-in, the country in his default shipping address will be selected.",
"default": "United States"
}
]
}
{% endschema %}

<!-- bcpo done -->